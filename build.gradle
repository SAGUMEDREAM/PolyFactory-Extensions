plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

enum RemapJarType {
	STABLE(""),
	BETA("beta"),
	ALPHA("alpha"),
	;
	public final String name;

	RemapJarType(String name) {
		this.name = name
	}
}

def remapJarType = RemapJarType.BETA
version = project.mod_version + "+" + project.minecraft_version + (remapJarType == RemapJarType.STABLE ? "" : "+" + remapJarType.name);

loom {
	accessWidenerPath = file("src/main/resources/polyfactory.extensions.accesswidener")
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
	maven { url = 'https://maven.nucleoid.xyz' }
	maven { url = "https://api.modrinth.com/maven/" }
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Infinituum Mod Resources"
		url = "https://raw.githubusercontent.com/Infinituum17/ModResources/main/maven/"
	}
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven { url = "https://api.modrinth.com/maven" }
	maven {
		name "opencollabRepositoryMavenReleases"
		url "https://repo.opencollab.dev/maven-releases"
	}
	maven {
		name "opencollabRepositoryMavenSnapshots"
		url "https://repo.opencollab.dev/maven-snapshots"
	}
	maven { url = "https://repo.opencollab.dev/main/" }
	maven { url = "https://maven.mohistmc.com/" }
	maven { url = "https://maven.architectury.dev/" }
	maven { url = "https://cursemaven.com" }
	maven { url "https://maven.tomalbrc.de" }
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url 'https://kneelawk.com/maven' }
	maven {
		name = "Kneelawk"
		url = "https://maven.kneelawk.com/releases/"
	}
	maven { url "https://maven.alexiil.uk/" }
	maven { url "https://api.modrinth.com/maven/" }
	maven { url = "https://jitpack.io" }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	flatDir {
		dirs 'libs'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "eu.pb4:polymer-core:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-blocks:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-resource-pack:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-resource-pack-extras:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-autohost:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-virtual-entity:${project.polymer_version}"
	//modImplementation "eu.pb4:polymer-sound-patcher:${project.polymer_version}"
	modImplementation include("eu.pb4:map-canvas-api:${project.mapcanvas_version}")
	modImplementation include("eu.pb4:common-protection-api:1.0.0")
	modImplementation include("eu.pb4:sidebar-api:0.5.1+1.21.1")
	modImplementation include("eu.pb4:sgui:1.10.2+1.21.8")
	modImplementation include("eu.pb4:factorytools:${project.factorytools_version}")
	modImplementation include("com.kneelawk.graphlib:graphlib-core-fabric:2.0.3-beta.1+1.21.5")
	modImplementation include("eu.pb4:factorytools:[${factorytools_version}]")
	modImplementation include("eu.pb4:sgui:[${sgui_version}]")
	modImplementation include("xyz.nucleoid:server-translations-api:2.5.1+1.21.5")

	modImplementation files('libs/polyfactory-0.8.2+1.21.8.jar')
	modCompileOnly 'maven.modrinth:polydex:1.3.0+1.21.2'

	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}